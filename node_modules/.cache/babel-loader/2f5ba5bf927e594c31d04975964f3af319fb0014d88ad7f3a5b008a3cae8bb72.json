{"ast":null,"code":"import LineChart from '@/components/LineChart.vue';\nimport NavbarView from '@/components/NavbarView.vue';\nexport default {\n  components: {\n    NavbarView,\n    LineChart\n  },\n  data() {\n    return {\n      filters: [\"Hari ini\", \"7 hari terakhir\", \"28 hari terakhir\", \"Perbulan\", \"Pertahun\"],\n      activeFilter: \"7 hari terakhir\",\n      chartData: {},\n      monthlyData: {},\n      yearlyData: {}\n    };\n  },\n  methods: {\n    setActiveFilter(filter) {\n      this.activeFilter = filter;\n      this.fetchData();\n    },\n    async fetchData() {\n      try {\n        // Simulasi Fake API\n        const response = await new Promise(resolve => {\n          setTimeout(() => {\n            resolve({\n              daily: {\n                labels: [\"1 Feb\", \"2 Feb\", \"3 Feb\"],\n                data: [1000000, 2000000, 1500000]\n              },\n              monthly: {\n                labels: [\"Jan\", \"Feb\", \"Mar\"],\n                data: [12000000, 15000000, 18000000]\n              },\n              yearly: {\n                labels: [\"2022\", \"2023\", \"2024\"],\n                data: [100000000, 120000000, 150000000]\n              }\n            });\n          }, 1000);\n        });\n        this.chartData = {\n          labels: response.daily.labels,\n          datasets: [{\n            label: \"Pendapatan\",\n            data: response.daily.data,\n            borderColor: \"#03a980\",\n            backgroundColor: \"rgba(3, 169, 128, 0.2)\",\n            tension: 0.3,\n            fill: true\n          }]\n        };\n        this.monthlyData = {\n          labels: response.monthly.labels,\n          datasets: [{\n            label: \"Pendapatan Bulanan\",\n            data: response.monthly.data,\n            borderColor: \"#ff9800\",\n            backgroundColor: \"rgba(255, 152, 0, 0.2)\",\n            tension: 0.3,\n            fill: true\n          }]\n        };\n        this.yearlyData = {\n          labels: response.yearly.labels,\n          datasets: [{\n            label: \"Pendapatan Tahunan\",\n            data: response.yearly.data,\n            borderColor: \"#3f51b5\",\n            backgroundColor: \"rgba(63, 81, 181, 0.2)\",\n            tension: 0.3,\n            fill: true\n          }]\n        };\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    }\n  },\n  mounted() {\n    this.fetchData();\n  }\n};","map":{"version":3,"names":["LineChart","NavbarView","components","data","filters","activeFilter","chartData","monthlyData","yearlyData","methods","setActiveFilter","filter","fetchData","response","Promise","resolve","setTimeout","daily","labels","monthly","yearly","datasets","label","borderColor","backgroundColor","tension","fill","error","console","mounted"],"sources":["C:\\Users\\IMAM\\OneDrive\\Desktop\\LPKNI\\lpkniweb\\src\\views\\admin\\GrafikKeuangan.vue"],"sourcesContent":["<template>\r\n  <div class=\"w-full min-h-screen bg-gray-100 pt-20 mb-8\">\r\n    <NavbarView />\r\n    <div class=\"flex justify-center mt-6\">\r\n      <select v-model=\"activeFilter\" @change=\"setActiveFilter(activeFilter)\" class=\"px-4 py-2 text-sm font-semibold bg-white border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#03a980]\">\r\n        <option v-for=\"filter in filters\" :key=\"filter\" :value=\"filter\">{{ filter }}</option>\r\n      </select>\r\n    </div>\r\n    <div class=\"flex justify-center mt-6\">\r\n      <div class=\"grid grid-cols-1 sm:grid-cols-2 gap-8 w-full md:w-[80%] px-4 md:px-0\">\r\n        <div class=\"bg-white p-4 md:p-6 rounded-lg shadow-md\">\r\n          <h3 class=\"text-base md:text-lg font-semibold\">Ringkasan Pemasukan</h3>\r\n          <p class=\"text-gray-500 text-xs md:text-sm\">Terakhir diperbarui 4 Feb 10:00 AM</p>\r\n          <h2 class=\"text-lg md:text-2xl font-bold text-black mt-2\">Rp12.000.000</h2>\r\n          <p class=\"text-gray-500 text-xs md:text-sm\">Pemasukan dalam {{ activeFilter }} terakhir</p>\r\n          <LineChart :chartData=\"chartData\" />\r\n        </div>\r\n        <div class=\"bg-white p-4 md:p-6 rounded-lg shadow-md\">\r\n          <h3 class=\"text-base md:text-lg font-semibold\">Ringkasan Pengeluaran</h3>\r\n          <p class=\"text-gray-500 text-xs md:text-sm\">Terakhir diperbarui 4 Feb 10:00 AM</p>\r\n          <h2 class=\"text-lg md:text-2xl font-bold text-black mt-2\">Rp9.500.000</h2>\r\n          <p class=\"text-gray-500 text-xs md:text-sm\">Pengeluaran dalam {{ activeFilter }} terakhir</p>\r\n          <LineChart :chartData=\"chartData\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"flex justify-center mt-6\">\r\n      <div class=\"grid grid-cols-1 sm:grid-cols-2 gap-8 w-full md:w-[80%] px-4 md:px-0\">\r\n        <div class=\"bg-white p-4 md:p-6 rounded-lg shadow-md\">\r\n          <h3 class=\"text-base md:text-lg font-semibold\">Pendapatan Perbulan</h3>\r\n          <LineChart :chartData=\"monthlyData\" />\r\n        </div>\r\n        <div class=\"bg-white p-4 md:p-6 rounded-lg shadow-md\">\r\n          <h3 class=\"text-base md:text-lg font-semibold\">Pendapatan Pertahun</h3>\r\n          <LineChart :chartData=\"yearlyData\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport LineChart from '@/components/LineChart.vue';\r\nimport NavbarView from '@/components/NavbarView.vue';\r\n\r\nexport default {\r\n  components: {\r\n    NavbarView,\r\n    LineChart\r\n  },\r\n  data() {\r\n    return {\r\n      filters: [\"Hari ini\", \"7 hari terakhir\", \"28 hari terakhir\", \"Perbulan\", \"Pertahun\"],\r\n      activeFilter: \"7 hari terakhir\",\r\n      chartData: {},\r\n      monthlyData: {},\r\n      yearlyData: {},\r\n    };\r\n  },\r\n  methods: {\r\n    setActiveFilter(filter) {\r\n      this.activeFilter = filter;\r\n      this.fetchData();\r\n    },\r\n    async fetchData() {\r\n      try {\r\n        // Simulasi Fake API\r\n        const response = await new Promise((resolve) => {\r\n          setTimeout(() => {\r\n            resolve({\r\n              daily: { labels: [\"1 Feb\", \"2 Feb\", \"3 Feb\"], data: [1000000, 2000000, 1500000] },\r\n              monthly: { labels: [\"Jan\", \"Feb\", \"Mar\"], data: [12000000, 15000000, 18000000] },\r\n              yearly: { labels: [\"2022\", \"2023\", \"2024\"], data: [100000000, 120000000, 150000000] },\r\n            });\r\n          }, 1000);\r\n        });\r\n\r\n        this.chartData = {\r\n          labels: response.daily.labels,\r\n          datasets: [{\r\n            label: \"Pendapatan\",\r\n            data: response.daily.data,\r\n            borderColor: \"#03a980\",\r\n            backgroundColor: \"rgba(3, 169, 128, 0.2)\",\r\n            tension: 0.3,\r\n            fill: true,\r\n          }],\r\n        };\r\n\r\n        this.monthlyData = {\r\n          labels: response.monthly.labels,\r\n          datasets: [{\r\n            label: \"Pendapatan Bulanan\",\r\n            data: response.monthly.data,\r\n            borderColor: \"#ff9800\",\r\n            backgroundColor: \"rgba(255, 152, 0, 0.2)\",\r\n            tension: 0.3,\r\n            fill: true,\r\n          }],\r\n        };\r\n\r\n        this.yearlyData = {\r\n          labels: response.yearly.labels,\r\n          datasets: [{\r\n            label: \"Pendapatan Tahunan\",\r\n            data: response.yearly.data,\r\n            borderColor: \"#3f51b5\",\r\n            backgroundColor: \"rgba(63, 81, 181, 0.2)\",\r\n            tension: 0.3,\r\n            fill: true,\r\n          }],\r\n        };\r\n\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchData();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@media (max-width: 640px) {\r\n  h3 {\r\n    font-size: 14px;\r\n  }\r\n  h2 {\r\n    font-size: 18px;\r\n  }\r\n  p {\r\n    font-size: 12px;\r\n  }\r\n  .p-6 {\r\n    padding: 1rem;\r\n  }\r\n}\r\n@media (min-width: 641px) and (max-width: 1024px) {\r\n  h3 {\r\n    font-size: 16px;\r\n  }\r\n  h2 {\r\n    font-size: 20px;\r\n  }\r\n  p {\r\n    font-size: 14px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AA2CA,OAAOA,SAAQ,MAAO,4BAA4B;AAClD,OAAOC,UAAS,MAAO,6BAA6B;AAEpD,eAAe;EACbC,UAAU,EAAE;IACVD,UAAU;IACVD;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,CAAC,UAAU,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,UAAU,EAAE,UAAU,CAAC;MACpFC,YAAY,EAAE,iBAAiB;MAC/BC,SAAS,EAAE,CAAC,CAAC;MACbC,WAAW,EAAE,CAAC,CAAC;MACfC,UAAU,EAAE,CAAC;IACf,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,eAAeA,CAACC,MAAM,EAAE;MACtB,IAAI,CAACN,YAAW,GAAIM,MAAM;MAC1B,IAAI,CAACC,SAAS,CAAC,CAAC;IAClB,CAAC;IACD,MAAMA,SAASA,CAAA,EAAG;MAChB,IAAI;QACF;QACA,MAAMC,QAAO,GAAI,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAK;UAC9CC,UAAU,CAAC,MAAM;YACfD,OAAO,CAAC;cACNE,KAAK,EAAE;gBAAEC,MAAM,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;gBAAEf,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO;cAAE,CAAC;cACjFgB,OAAO,EAAE;gBAAED,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;gBAAEf,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ;cAAE,CAAC;cAChFiB,MAAM,EAAE;gBAAEF,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;gBAAEf,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS;cAAE;YACtF,CAAC,CAAC;UACJ,CAAC,EAAE,IAAI,CAAC;QACV,CAAC,CAAC;QAEF,IAAI,CAACG,SAAQ,GAAI;UACfY,MAAM,EAAEL,QAAQ,CAACI,KAAK,CAACC,MAAM;UAC7BG,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,YAAY;YACnBnB,IAAI,EAAEU,QAAQ,CAACI,KAAK,CAACd,IAAI;YACzBoB,WAAW,EAAE,SAAS;YACtBC,eAAe,EAAE,wBAAwB;YACzCC,OAAO,EAAE,GAAG;YACZC,IAAI,EAAE;UACR,CAAC;QACH,CAAC;QAED,IAAI,CAACnB,WAAU,GAAI;UACjBW,MAAM,EAAEL,QAAQ,CAACM,OAAO,CAACD,MAAM;UAC/BG,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,oBAAoB;YAC3BnB,IAAI,EAAEU,QAAQ,CAACM,OAAO,CAAChB,IAAI;YAC3BoB,WAAW,EAAE,SAAS;YACtBC,eAAe,EAAE,wBAAwB;YACzCC,OAAO,EAAE,GAAG;YACZC,IAAI,EAAE;UACR,CAAC;QACH,CAAC;QAED,IAAI,CAAClB,UAAS,GAAI;UAChBU,MAAM,EAAEL,QAAQ,CAACO,MAAM,CAACF,MAAM;UAC9BG,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,oBAAoB;YAC3BnB,IAAI,EAAEU,QAAQ,CAACO,MAAM,CAACjB,IAAI;YAC1BoB,WAAW,EAAE,SAAS;YACtBC,eAAe,EAAE,wBAAwB;YACzCC,OAAO,EAAE,GAAG;YACZC,IAAI,EAAE;UACR,CAAC;QACH,CAAC;MAEH,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR,IAAI,CAACjB,SAAS,CAAC,CAAC;EAClB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}