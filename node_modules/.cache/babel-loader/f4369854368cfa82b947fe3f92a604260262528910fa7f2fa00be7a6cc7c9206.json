{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport NavbarView from '@/components/NavbarView.vue';\nexport default {\n  components: {\n    NavbarView\n  },\n  data() {\n    return {\n      chatList: [{\n        id: 1,\n        name: 'Chatgram',\n        lastMessage: 'Chatgram Web was updated.'\n      }, {\n        id: 2,\n        name: 'Jessica Drew',\n        lastMessage: 'Ok, see you later'\n      }, {\n        id: 3,\n        name: 'David Moore',\n        lastMessage: 'You: I don’t remember anything 😁'\n      }, {\n        id: 4,\n        name: 'Greg James',\n        lastMessage: 'I got a job at SpaceX 🎉🚀'\n      }],\n      messages: [{\n        id: 1,\n        sender: 'other',\n        text: 'Dapur di pak muru kotor nih'\n      }, {\n        id: 2,\n        sender: 'me',\n        text: 'Halo Permisi'\n      }, {\n        id: 3,\n        sender: 'me',\n        text: 'Informasinya kami simpan'\n      }],\n      newMessage: '',\n      selectedChat: null\n    };\n  },\n  methods: {\n    sendMessage() {\n      if (this.newMessage.trim()) {\n        this.messages.push({\n          id: Date.now(),\n          sender: 'me',\n          text: this.newMessage\n        });\n        this.newMessage = '';\n      }\n    },\n    deleteChat(chatId) {\n      this.chatList = this.chatList.filter(chat => chat.id !== chatId);\n    },\n    selectChat(chatId) {\n      this.selectedChat = chatId;\n      this.messages = this.getMessagesForChat(chatId); // Replace this with actual logic to fetch messages for the selected chat\n    },\n    backToChatList() {\n      this.selectedChat = null;\n      this.messages = []; // Reset messages when going back\n    },\n    getMessagesForChat(chatId) {\n      // Replace this with actual logic to fetch messages for the selected chat\n      return [{\n        id: 1,\n        sender: 'other',\n        text: 'This is a message from ' + chatId\n      }, {\n        id: 2,\n        sender: 'me',\n        text: 'This is a reply to ' + chatId\n      }];\n    }\n  }\n};","map":{"version":3,"names":["NavbarView","components","data","chatList","id","name","lastMessage","messages","sender","text","newMessage","selectedChat","methods","sendMessage","trim","push","Date","now","deleteChat","chatId","filter","chat","selectChat","getMessagesForChat","backToChatList"],"sources":["C:\\Users\\IMAM\\OneDrive\\Desktop\\LPKNI\\lpkniweb\\src\\views\\admin\\CsView.vue"],"sourcesContent":["<template>\r\n  <div class=\"w-screen min-h-screen flex flex-col bg-gray-100\">\r\n    <!-- Navbar -->\r\n    <NavbarView />\r\n\r\n    <div class=\"p-8 mt-[100px]\">\r\n      <div class=\"bg-gray-100 p-6 rounded-lg shadow\">\r\n        <div class=\"flex justify-between items-center mb-4\">\r\n          <h2 class=\"text-lg font-semibold\">Chat</h2>\r\n        </div>\r\n\r\n        <!-- Responsive Chat Layout -->\r\n        <div class=\"flex flex-col lg:flex-row border rounded-lg overflow-hidden h-[800px]\">\r\n\r\n          <!-- Sidebar Chat List -->\r\n          <div class=\"w-full lg:w-1/3 bg-white border-r overflow-y-auto sm:block\">\r\n            <div class=\"p-4 border-b flex items-center gap-2\">\r\n              <input type=\"text\" class=\"w-full p-2 border rounded\" placeholder=\"Search...\" />\r\n            </div>\r\n            <ul>\r\n              <li\r\n                v-for=\"chat in chatList\"\r\n                :key=\"chat.id\"\r\n                @click=\"selectChat(chat.id)\"\r\n                class=\"p-4 border-b flex items-center gap-3 cursor-pointer hover:bg-gray-100\"\r\n              >\r\n                <div class=\"w-10 h-10 bg-gray-300 rounded-full\"></div>\r\n                <div class=\"flex-grow\">\r\n                  <h3 class=\"font-semibold\">{{ chat.name }}</h3>\r\n                  <p class=\"text-sm text-gray-600\">{{ chat.lastMessage }}</p>\r\n                </div>\r\n                <button @click=\"deleteChat(chat.id)\" class=\"text-red-500\">✖</button>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n\r\n          <!-- Chat Content -->\r\n          <!-- Chat Content -->\r\n<div v-if=\"selectedChat\" class=\"w-full lg:w-2/3 bg-green-100 flex flex-col min-h-screen\">\r\n  <div class=\"flex justify-between p-4 border-b bg-white\">\r\n    <button @click=\"backToChatList\" class=\"text-[#03a980]\">Back to Chat List</button>\r\n  </div>\r\n\r\n  <div class=\"flex-grow overflow-y-auto p-4\">\r\n    <div v-for=\"message in messages\" :key=\"message.id\" class=\"mb-4\">\r\n      <div v-if=\"message.sender === 'me'\" class=\"flex justify-end\">\r\n        <div class=\"bg-green-600 text-white p-3 rounded-lg max-w-xs\">{{ message.text }}</div>\r\n      </div>\r\n      <div v-else class=\"flex items-center gap-2\">\r\n        <div class=\"w-10 h-10 bg-gray-300 rounded-full\"></div>\r\n        <div class=\"bg-white p-3 rounded-lg max-w-xs\">{{ message.text }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Message Input -->\r\n  <div class=\"p-4 bg-white flex items-center gap-2 border-t mt-4\">\r\n    <input type=\"text\" v-model=\"newMessage\" class=\"w-full p-2 border rounded\" placeholder=\"Type a message...\" />\r\n    <button @click=\"sendMessage\" class=\"bg-green-600 text-white px-4 py-2 rounded\">Send</button>\r\n  </div>\r\n</div>\r\n\r\n\r\n          <!-- If no chat selected -->\r\n          <div v-else class=\"flex-grow flex items-center justify-center text-gray-500\">\r\n            Pilih percakapan untuk melihat isi chat.\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport NavbarView from '@/components/NavbarView.vue';\r\n\r\nexport default {\r\n  components: {\r\n    NavbarView,\r\n  },\r\n  data() {\r\n    return {\r\n      chatList: [\r\n        { id: 1, name: 'Chatgram', lastMessage: 'Chatgram Web was updated.' },\r\n        { id: 2, name: 'Jessica Drew', lastMessage: 'Ok, see you later' },\r\n        { id: 3, name: 'David Moore', lastMessage: 'You: I don’t remember anything 😁' },\r\n        { id: 4, name: 'Greg James', lastMessage: 'I got a job at SpaceX 🎉🚀' },\r\n      ],\r\n      messages: [\r\n        { id: 1, sender: 'other', text: 'Dapur di pak muru kotor nih' },\r\n        { id: 2, sender: 'me', text: 'Halo Permisi' },\r\n        { id: 3, sender: 'me', text: 'Informasinya kami simpan' },\r\n      ],\r\n      newMessage: '',\r\n      selectedChat: null,\r\n    };\r\n  },\r\n  methods: {\r\n    sendMessage() {\r\n      if (this.newMessage.trim()) {\r\n        this.messages.push({ id: Date.now(), sender: 'me', text: this.newMessage });\r\n        this.newMessage = '';\r\n      }\r\n    },\r\n    deleteChat(chatId) {\r\n      this.chatList = this.chatList.filter(chat => chat.id !== chatId);\r\n    },\r\n    selectChat(chatId) {\r\n      this.selectedChat = chatId;\r\n      this.messages = this.getMessagesForChat(chatId); // Replace this with actual logic to fetch messages for the selected chat\r\n    },\r\n    backToChatList() {\r\n      this.selectedChat = null;\r\n      this.messages = []; // Reset messages when going back\r\n    },\r\n    getMessagesForChat(chatId) {\r\n      // Replace this with actual logic to fetch messages for the selected chat\r\n      return [\r\n        { id: 1, sender: 'other', text: 'This is a message from ' + chatId },\r\n        { id: 2, sender: 'me', text: 'This is a reply to ' + chatId },\r\n      ];\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Optional: Use Tailwind's responsive classes instead of custom media queries */\r\n\r\n@media screen and (max-width: 768px) {\r\n  .lg\\:w-1\\/3 {\r\n    width: 100%;\r\n  }\r\n\r\n  .lg\\:w-2\\/3 {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;;AA2EA,OAAOA,UAAS,MAAO,6BAA6B;AAEpD,eAAe;EACbC,UAAU,EAAE;IACVD;EACF,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,CACR;QAAEC,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,UAAU;QAAEC,WAAW,EAAE;MAA4B,CAAC,EACrE;QAAEF,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,cAAc;QAAEC,WAAW,EAAE;MAAoB,CAAC,EACjE;QAAEF,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,aAAa;QAAEC,WAAW,EAAE;MAAoC,CAAC,EAChF;QAAEF,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,YAAY;QAAEC,WAAW,EAAE;MAA6B,CAAC,CACzE;MACDC,QAAQ,EAAE,CACR;QAAEH,EAAE,EAAE,CAAC;QAAEI,MAAM,EAAE,OAAO;QAAEC,IAAI,EAAE;MAA8B,CAAC,EAC/D;QAAEL,EAAE,EAAE,CAAC;QAAEI,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAe,CAAC,EAC7C;QAAEL,EAAE,EAAE,CAAC;QAAEI,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAA2B,CAAC,CAC1D;MACDC,UAAU,EAAE,EAAE;MACdC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACH,UAAU,CAACI,IAAI,CAAC,CAAC,EAAE;QAC1B,IAAI,CAACP,QAAQ,CAACQ,IAAI,CAAC;UAAEX,EAAE,EAAEY,IAAI,CAACC,GAAG,CAAC,CAAC;UAAET,MAAM,EAAE,IAAI;UAAEC,IAAI,EAAE,IAAI,CAACC;QAAW,CAAC,CAAC;QAC3E,IAAI,CAACA,UAAS,GAAI,EAAE;MACtB;IACF,CAAC;IACDQ,UAAUA,CAACC,MAAM,EAAE;MACjB,IAAI,CAAChB,QAAO,GAAI,IAAI,CAACA,QAAQ,CAACiB,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACjB,EAAC,KAAMe,MAAM,CAAC;IAClE,CAAC;IACDG,UAAUA,CAACH,MAAM,EAAE;MACjB,IAAI,CAACR,YAAW,GAAIQ,MAAM;MAC1B,IAAI,CAACZ,QAAO,GAAI,IAAI,CAACgB,kBAAkB,CAACJ,MAAM,CAAC,EAAE;IACnD,CAAC;IACDK,cAAcA,CAAA,EAAG;MACf,IAAI,CAACb,YAAW,GAAI,IAAI;MACxB,IAAI,CAACJ,QAAO,GAAI,EAAE,EAAE;IACtB,CAAC;IACDgB,kBAAkBA,CAACJ,MAAM,EAAE;MACzB;MACA,OAAO,CACL;QAAEf,EAAE,EAAE,CAAC;QAAEI,MAAM,EAAE,OAAO;QAAEC,IAAI,EAAE,yBAAwB,GAAIU;MAAO,CAAC,EACpE;QAAEf,EAAE,EAAE,CAAC;QAAEI,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE,qBAAoB,GAAIU;MAAO,CAAC,CAC9D;IACH;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}